Test2

Конечный вид таблиц

Таблица ticket_types:
id      | name         | price
--------|--------------|--------
1       | adult        | 700
2       | child        | 450
3       | discount     | 350
4       | group        | 600

Таблица orders:
id      | event_id | event_date         | equal_price | created
--------|----------|--------------------|-------------|---------------------
1       | 003      | 2021-08-21 13:00:00| 700         | 2021-01-11 13:22:09
2       | 006      | 2021-07-29 18:00:00| 1600        | 2021-01-12 16:62:08

Таблица tickets:
id      | order_id | ticket_type_id | quantity | barcode
--------|----------|----------------|----------|--------
1       | 1       | 1              | 2        | 11111111
2       | 1       | 2              | 3        | 22222222
3       | 1       | 3              | 4        | 33333333
4       | 2       | 1              | 1        | 44444444
5       | 2       | 2              | 2        | 55555555

Объяснение решения
Создание таблицы ticket_types:

Отделение типов билетов позволяет избежать дублирования данных и упрощает управление различными типами. Если потребуется добавить новый тип билета, это можно сделать 
в одной таблице, не затрагивая другие.
Разделение таблиц orders и tickets:

Нормализация данных позволяет сохранять уникальные штрих-коды для каждого билета. Теперь для каждого типа билета в заказе создается отдельная запись в таблице tickets,
что позволяет легко отслеживать и управлять каждым билетом. В случае, если несколько билетов одного типа покупаются в одном заказе, можно указать их количество 
(например, 2 взрослых билета).
Каждому билету присваивается уникальный штрих-код, что упрощает проверку билетов на входе на событие и позволяет отслеживать их по отдельности.


Test3

Документация задания 1:
Для решения этой задачи на PHP вам потребуется создать функцию, которая будет выполнять следующие шаги:

1. Генерировать уникальный barcode;
2. Отправлять запрос на сторонний API для бронирования заказа;
3. Если ответ содержит ошибку с barcode, генерировать новый barcode и повторять попытку до успешного бронирования;
4. После успешного бронирования отправить запрос на подтверждение;
5. В зависимости от ответа на подтверждение, либо сохранить заказ в базе данных, либо обрабатывать ошибки.

Пояснение к коду:
Генерация barcode: Используется функция generateUniqueBarcode, которая генерирует случайный 8-значный номер и проверяет его на уникальность в базе данных.

Функция bookOrder: Она выполняет основной процесс бронирования заказа. В случае ошибки с barcode функция рекурсивно вызывается снова для повторной попытки с новым barcode.

Отправка запросов к API: Функция sendApiRequest эмулирует отправку запроса на внешний API и возвращает случайный ответ из заранее определённого списка.

Сохранение заказа: Если подтверждение прошло успешно, заказ сохраняется в базу данных через функцию saveOrderToDatabase.

Обработка ошибок: Код обрабатывает ошибки, возникающие как при бронировании, так и при подтверждении.

Зависимости:
Для работы с базой данных используется PDO, поэтому необходимо убедиться, что PHP поддерживает эту библиотеку и установлены соответствующие расширения.

Документация задания 2:
Для решения задачи нормализации базы данных с учетом дополнительных типов билетов (льготные и групповые), а также требования о наличии уникального штрих-кода для каждого 
купленного билета, необходимо внести изменения в структуру таблиц. Это обеспечит более гибкую и расширяемую модель данных. Ниже приведены шаги по нормализации и конечный вид таблиц.

Шаги нормализации
Выделение типов билетов в отдельную таблицу:

Создайте таблицу ticket_types, которая будет содержать информацию о каждом типе билета (например, взрослый, детский, льготный и групповой). Это позволит легко добавлять 
новые типы билетов в будущем.

Таблица ticket_types:
id      | name         | price
--------|--------------|--------
1       | adult        | 700
2       | child        | 450
3       | discount     | 350
4       | group        | 600

Создание таблицы для хранения заказов и билетов:

Вместо того, чтобы сохранять все данные о заказах и билетах в одной таблице, создайте две таблицы: одну для хранения информации о заказах, а другую — для хранения 
информации о каждом билете, связанного с заказом.

Таблица orders (заказы):
id      | event_id | event_date         | equal_price | created
--------|----------|--------------------|-------------|---------------------
1       | 003      | 2021-08-21 13:00:00| 700         | 2021-01-11 13:22:09
2       | 006      | 2021-07-29 18:00:00| 1600        | 2021-01-12 16:62:08

Таблица tickets (билеты):
id      | order_id | ticket_type_id | quantity | barcode
--------|----------|----------------|----------|--------
1       | 1       | 1              | 2        | 11111111
2       | 1       | 2              | 3        | 22222222
3       | 1       | 3              | 4        | 33333333
4       | 2       | 1              | 1        | 44444444
5       | 2       | 2              | 2        | 55555555